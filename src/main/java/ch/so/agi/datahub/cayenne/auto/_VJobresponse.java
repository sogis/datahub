package ch.so.agi.datahub.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _VJobresponse was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _VJobresponse extends BaseDataObject {

    private static final long serialVersionUID = 1L;


    public static final DateProperty<LocalDateTime> CREATEDAT = PropertyFactory.createDate("createdat", LocalDateTime.class);
    public static final StringProperty<String> JOBID = PropertyFactory.createString("jobid", String.class);
    public static final StringProperty<String> OPERAT = PropertyFactory.createString("operat", String.class);
    public static final StringProperty<String> ORGANISATION = PropertyFactory.createString("organisation", String.class);
    public static final NumericProperty<Long> QUEUEPOSITION = PropertyFactory.createNumeric("queueposition", Long.class);
    public static final StringProperty<String> STATUS = PropertyFactory.createString("status", String.class);
    public static final StringProperty<String> THEME = PropertyFactory.createString("theme", String.class);
    public static final DateProperty<LocalDateTime> UPDATEDAT = PropertyFactory.createDate("updatedat", LocalDateTime.class);
    public static final StringProperty<String> VALIDATIONSTATUS = PropertyFactory.createString("validationstatus", String.class);

    protected LocalDateTime createdat;
    protected String jobid;
    protected String operat;
    protected String organisation;
    protected Long queueposition;
    protected String status;
    protected String theme;
    protected LocalDateTime updatedat;
    protected String validationstatus;


    public void setCreatedat(LocalDateTime createdat) {
        beforePropertyWrite("createdat", this.createdat, createdat);
        this.createdat = createdat;
    }

    public LocalDateTime getCreatedat() {
        beforePropertyRead("createdat");
        return this.createdat;
    }

    public void setJobid(String jobid) {
        beforePropertyWrite("jobid", this.jobid, jobid);
        this.jobid = jobid;
    }

    public String getJobid() {
        beforePropertyRead("jobid");
        return this.jobid;
    }

    public void setOperat(String operat) {
        beforePropertyWrite("operat", this.operat, operat);
        this.operat = operat;
    }

    public String getOperat() {
        beforePropertyRead("operat");
        return this.operat;
    }

    public void setOrganisation(String organisation) {
        beforePropertyWrite("organisation", this.organisation, organisation);
        this.organisation = organisation;
    }

    public String getOrganisation() {
        beforePropertyRead("organisation");
        return this.organisation;
    }

    public void setQueueposition(Long queueposition) {
        beforePropertyWrite("queueposition", this.queueposition, queueposition);
        this.queueposition = queueposition;
    }

    public Long getQueueposition() {
        beforePropertyRead("queueposition");
        return this.queueposition;
    }

    public void setStatus(String status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public String getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setTheme(String theme) {
        beforePropertyWrite("theme", this.theme, theme);
        this.theme = theme;
    }

    public String getTheme() {
        beforePropertyRead("theme");
        return this.theme;
    }

    public void setUpdatedat(LocalDateTime updatedat) {
        beforePropertyWrite("updatedat", this.updatedat, updatedat);
        this.updatedat = updatedat;
    }

    public LocalDateTime getUpdatedat() {
        beforePropertyRead("updatedat");
        return this.updatedat;
    }

    public void setValidationstatus(String validationstatus) {
        beforePropertyWrite("validationstatus", this.validationstatus, validationstatus);
        this.validationstatus = validationstatus;
    }

    public String getValidationstatus() {
        beforePropertyRead("validationstatus");
        return this.validationstatus;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdat":
                return this.createdat;
            case "jobid":
                return this.jobid;
            case "operat":
                return this.operat;
            case "organisation":
                return this.organisation;
            case "queueposition":
                return this.queueposition;
            case "status":
                return this.status;
            case "theme":
                return this.theme;
            case "updatedat":
                return this.updatedat;
            case "validationstatus":
                return this.validationstatus;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdat":
                this.createdat = (LocalDateTime)val;
                break;
            case "jobid":
                this.jobid = (String)val;
                break;
            case "operat":
                this.operat = (String)val;
                break;
            case "organisation":
                this.organisation = (String)val;
                break;
            case "queueposition":
                this.queueposition = (Long)val;
                break;
            case "status":
                this.status = (String)val;
                break;
            case "theme":
                this.theme = (String)val;
                break;
            case "updatedat":
                this.updatedat = (LocalDateTime)val;
                break;
            case "validationstatus":
                this.validationstatus = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdat);
        out.writeObject(this.jobid);
        out.writeObject(this.operat);
        out.writeObject(this.organisation);
        out.writeObject(this.queueposition);
        out.writeObject(this.status);
        out.writeObject(this.theme);
        out.writeObject(this.updatedat);
        out.writeObject(this.validationstatus);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdat = (LocalDateTime)in.readObject();
        this.jobid = (String)in.readObject();
        this.operat = (String)in.readObject();
        this.organisation = (String)in.readObject();
        this.queueposition = (Long)in.readObject();
        this.status = (String)in.readObject();
        this.theme = (String)in.readObject();
        this.updatedat = (LocalDateTime)in.readObject();
        this.validationstatus = (String)in.readObject();
    }

}
